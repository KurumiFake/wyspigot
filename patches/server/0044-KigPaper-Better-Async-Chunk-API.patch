From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: RoccoDev <hey@rocco.dev>
Date: Sat, 6 Feb 2021 13:19:27 +0100
Subject: [PATCH] (KigPaper) Better Async Chunk API


diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index 5b61848a33cb63c3d9f419b4eb2747b129c397ce..247e5db3245133b0945e530143a9f3ce29a56702 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -7,6 +7,7 @@ import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
+import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ConcurrentHashMap;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -115,6 +116,35 @@ public class ChunkProviderServer implements IChunkProvider {
         return getChunkAt(i, j, null);
     }
 
+    // KigPaper start
+    public CompletableFuture<Chunk> getChunkAtAsync(int x, int z) {
+        unloadQueue.remove(x, z);
+        Chunk chunk = chunks.get(LongHash.toLong(x, z));
+        if(chunk != null) {
+            return CompletableFuture.completedFuture(chunk);
+        }
+        ChunkRegionLoader loader = null;
+
+        if (this.chunkLoader instanceof ChunkRegionLoader) {
+            loader = (ChunkRegionLoader) this.chunkLoader;
+
+        }
+        CompletableFuture<Chunk> future = new CompletableFuture<>();
+        // We can only use the queue for already generated chunks
+        if (loader != null && loader.chunkExists(world, x, z)) {
+            ChunkIOExecutor.queueChunkLoad(world, loader, this, x, z, () -> future.complete(getChunkAt(x, z, null)));
+            return future;
+        } else {
+            chunk = originalGetChunkAt(x, z);
+        }
+
+        // If we didn't load the chunk async complete the future now
+        future.complete(chunk);
+
+        return future;
+    }
+    // KigPaper end
+
     public Chunk getChunkAt(int i, int j, Runnable runnable) {
         long key = LongHash.toLong(i, j); // IonSpigot - Only create key once
         unloadQueue.remove(key); // IonSpigot // TacoSpigot - directly invoke LongHash
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 1df845f20c527bba1ee1ee51a8a8e263e31a5700..7ac7c49919d24bd577fbff5f5aeacbf44c971edf 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -11,6 +11,7 @@ import java.util.Iterator;
 import java.util.Random;
 import java.util.Set;
 import java.util.UUID;
+import java.util.concurrent.CompletableFuture;
 
 import net.minecraft.server.*;
 
@@ -124,6 +125,7 @@ public class CraftWorld implements World {
     }
 
     // PaperSpigot start - Async chunk load API
+    @Deprecated
     public void getChunkAtAsync(final int x, final int z, final ChunkLoadCallback callback) {
         final ChunkProviderServer cps = this.world.chunkProviderServer;
         cps.getChunkAt(x, z, new Runnable() {
@@ -133,12 +135,30 @@ public class CraftWorld implements World {
             }
         });
     }
+    @Deprecated
     public void getChunkAtAsync(Block block, ChunkLoadCallback callback) {
         getChunkAtAsync(block.getX() >> 4, block.getZ() >> 4, callback);
     }
+    @Deprecated
     public void getChunkAtAsync(Location location, ChunkLoadCallback callback) {
         getChunkAtAsync(location.getBlockX() >> 4, location.getBlockZ() >> 4, callback);
     }
+    // KigPaper start - better Java 8 API
+    @Override
+    public CompletableFuture<Chunk> getChunkAtAsync(final int x, final int z) {
+        final ChunkProviderServer cps = this.world.chunkProviderServer;
+        CompletableFuture<net.minecraft.server.Chunk> future = cps.getChunkAtAsync(x, z);
+        return future == null ? null : future.thenApply(chunk -> chunk.bukkitChunk);
+    }
+    @Override
+    public CompletableFuture<Chunk> getChunkAtAsync(Block block) {
+        return getChunkAtAsync(block.getX() >> 4, block.getZ() >> 4);
+    }
+    @Override
+    public CompletableFuture<Chunk> getChunkAtAsync(Location location) {
+        return getChunkAtAsync(location.getBlockX() >> 4, location.getBlockZ() >> 4);
+    }
+    // KigPaper end
     // PaperSpigot end
 
     public Chunk getChunkAt(int x, int z) {
