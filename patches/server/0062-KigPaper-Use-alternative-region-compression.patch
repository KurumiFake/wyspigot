From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: RoccoDev <hey@rocco.dev>
Date: Sat, 30 Oct 2021 19:31:24 +0200
Subject: [PATCH] (KigPaper) Use alternative region compression

LZ4 is used for its speed and the fact that it has a pure-Java implementation.

diff --git a/patch.diff b/patch.diff
index a0946e7025cbe6a0b28b842c3ead06e45bc4e011..b78df401d368db24edf00bccbec7396ff8281abc 100644
--- a/patch.diff
+++ b/patch.diff
@@ -1,43 +1,180 @@
-diff --git a/src/main/java/net/minecraft/server/PacketPlayInBlockPlace.java b/src/main/java/net/minecraft/server/PacketPlayInBlockPlace.java
-index 02d8e07f8..b305ee0f3 100644
---- a/src/main/java/net/minecraft/server/PacketPlayInBlockPlace.java
-+++ b/src/main/java/net/minecraft/server/PacketPlayInBlockPlace.java
-@@ -1,5 +1,7 @@
+diff --git a/pom.xml b/pom.xml
+index 2be32c45c..75b6f5099 100644
+--- a/pom.xml
++++ b/pom.xml
+@@ -89,6 +89,12 @@
+             <version>1.3</version>
+             <scope>test</scope>
+         </dependency>
++        <!-- // KigPaper -->
++        <dependency>
++            <groupId>org.lz4</groupId>
++            <artifactId>lz4-java</artifactId>
++            <version>1.8.0</version>
++        </dependency>
+     </dependencies>
+ 
+     <!-- required until fixed plexus-compiler-eclipse is deployed -->
+diff --git a/src/main/java/net/minecraft/server/RegionFile.java b/src/main/java/net/minecraft/server/RegionFile.java
+index 1e2db5a3d..e113ca8af 100644
+--- a/src/main/java/net/minecraft/server/RegionFile.java
++++ b/src/main/java/net/minecraft/server/RegionFile.java
+@@ -1,6 +1,10 @@
  package net.minecraft.server;
  
-+import io.netty.handler.codec.DecoderException;
-+
- import java.io.IOException;
- 
- public class PacketPlayInBlockPlace implements Packet<PacketListenerPlayIn> {
-@@ -33,7 +35,12 @@ public class PacketPlayInBlockPlace implements Packet<PacketListenerPlayIn> {
-         timestamp = System.currentTimeMillis(); // CraftBukkit
-         this.b = packetdataserializer.c();
-         this.c = packetdataserializer.readUnsignedByte();
--        this.d = packetdataserializer.i();
-+        // KigPaper start - don't parse itemstack
-+        // this.d = packetdataserializer.i();
-+        // Consume everything and leave 3 bytes at the end
-+        if (packetdataserializer.readableBytes() < 3) throw new DecoderException("Expected 3 facing bytes");
-+        packetdataserializer.skipBytes(packetdataserializer.readableBytes() - 3);
+ import com.google.common.collect.Lists;
++import net.jpountz.lz4.LZ4BlockInputStream;
++import net.jpountz.lz4.LZ4BlockOutputStream;
++import net.jpountz.lz4.LZ4Factory;
++import org.github.paperspigot.PaperSpigotConfig;
+ import org.github.paperspigot.exception.ServerInternalException;
+ 
+ import java.io.*;
+@@ -9,9 +13,11 @@ import java.nio.IntBuffer;
+ import java.util.List;
+ import java.util.zip.DeflaterOutputStream;
+ import java.util.zip.GZIPInputStream;
++import java.util.zip.GZIPOutputStream;
+ import java.util.zip.InflaterInputStream;
+ 
+ public class RegionFile {
++    private static final LZ4Factory lz4Factory = LZ4Factory.fastestJavaInstance(); // KigPaper
+ 
+     private static final byte[] a = new byte[4096]; // Spigot - note: if this ever changes to not be 4096 bytes, update constructor! // PAIL: empty 4k block
+     private final File b;
+@@ -161,14 +167,26 @@ public class RegionFile {
+                             byte b0 = this.c.readByte();
+                             byte[] abyte;
+ 
+-                            if (b0 == 1) {
++                            if (b0 == CompressionAlgorithm.NONE.ordinal()) {
++                                // KigPaper start - add no decompression
++                                abyte = new byte[j1 - 1];
++                                this.c.read(abyte);
++                                return new DataInputStream(new BufferedInputStream(new ByteArrayInputStream(abyte)));
++                                // KigPaper end
++                            } else if (b0 == CompressionAlgorithm.GZIP.ordinal()) {
+                                 abyte = new byte[j1 - 1];
+                                 this.c.read(abyte);
+                                 return new DataInputStream(new BufferedInputStream(new GZIPInputStream(new ByteArrayInputStream(abyte))));
+-                            } else if (b0 == 2) {
++                            } else if (b0 == CompressionAlgorithm.ZLIB.ordinal()) {
+                                 abyte = new byte[j1 - 1];
+                                 this.c.read(abyte);
+                                 return new DataInputStream(new BufferedInputStream(new InflaterInputStream(new ByteArrayInputStream(abyte))));
++                            } else if (b0 == CompressionAlgorithm.LZ4.ordinal()) {
++                                // KigPaper start - add LZ4 decompression
++                                abyte = new byte[j1 - 1];
++                                this.c.read(abyte);
++                                return new DataInputStream(new BufferedInputStream(new LZ4BlockInputStream(new ByteArrayInputStream(abyte), lz4Factory.fastDecompressor())));
++                                // KigPaper end
+                             } else {
+                                 return null;
+                             }
+@@ -181,9 +199,32 @@ public class RegionFile {
+         }
+     }
+ 
+-    public DataOutputStream b(int i, int j) { // PAIL: getChunkOutputStream
++    public DataOutputStream b(int i, int j) throws IOException { // PAIL: getChunkOutputStream // KigPaper - add throws
+         // PAIL: isInvalidRegion
+-        return this.d(i, j) ? null : new DataOutputStream(new java.io.BufferedOutputStream(new DeflaterOutputStream(new RegionFile.ChunkBuffer(i, j)))); // Spigot - use a BufferedOutputStream to greatly improve file write performance
++        if (this.d(i, j)) {
++            return null;
++        }
++        // KigPaper start - add alternative compression algorithms
++        ChunkBuffer buffer = new RegionFile.ChunkBuffer(i, j);
++        OutputStream stream;
++        switch (PaperSpigotConfig.regionCompressionAlgorithm) {
++            case NONE:
++                stream = buffer;
++                break;
++            case GZIP:
++                stream = new GZIPOutputStream(buffer); // Normally not supported by the Notchian server
++                break;
++            case ZLIB:
++                stream = new DeflaterOutputStream(buffer);
++                break;
++            case LZ4:
++                stream = new LZ4BlockOutputStream(buffer, 65536, lz4Factory.fastCompressor());
++                break;
++            default:
++                throw new UnsupportedEncodingException("invalid compression algorithm");
++        }
++        return new DataOutputStream(new BufferedOutputStream(stream));
 +        // KigPaper end
-         this.e = (float) packetdataserializer.readUnsignedByte() / 16.0F;
-         this.f = (float) packetdataserializer.readUnsignedByte() / 16.0F;
-         this.g = (float) packetdataserializer.readUnsignedByte() / 16.0F;
-diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
-index 8f6dfdb40..72545b297 100644
---- a/src/main/java/net/minecraft/server/PlayerConnection.java
-+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
-@@ -793,7 +793,8 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
-             this.player.activeContainer.b();
-             this.player.g = false;
-             // CraftBukkit - TODO CHECK IF NEEDED -- new if structure might not need 'always'. Kept it in for now, but may be able to remove in future
--            if (!ItemStack.matches(this.player.inventory.getItemInHand(), packetplayinblockplace.getItemStack()) || always) {
-+            //if (!ItemStack.matches(this.player.inventory.getItemInHand(), packetplayinblockplace.getItemStack()) || always) { // KigPaper
-+            if (always) {
-                 this.sendPacket(new PacketPlayOutSetSlot(this.player.activeContainer.windowId, slot.rawSlotIndex, this.player.inventory.getItemInHand()));
-             }
+     }
+ 
+     protected synchronized void a(int i, int j, byte[] abyte, int k) {
+@@ -262,9 +303,9 @@ public class RegionFile {
+     }
+ 
+     private void a(int i, byte[] abyte, int j) throws IOException {
+-        this.c.seek((long) (i * 4096));
++        this.c.seek(i * 4096L);
+         this.c.writeInt(j + 1);
+-        this.c.writeByte(2);
++        this.c.writeByte(PaperSpigotConfig.regionCompressionAlgorithm.ordinal());
+         this.c.write(abyte, 0, j);
+     }
+ 
+@@ -314,4 +355,13 @@ public class RegionFile {
+             RegionFile.this.a(this.b, this.c, this.buf, this.count);
          }
+     }
++
++    // KigPaper start
++    public enum CompressionAlgorithm {
++        NONE,
++        GZIP,
++        ZLIB,
++        LZ4 // KigPaper
++    }
++    // KigPaper end
+ }
+diff --git a/src/main/java/net/minecraft/server/RegionFileCache.java b/src/main/java/net/minecraft/server/RegionFileCache.java
+index 4cfaf3005..632995225 100644
+--- a/src/main/java/net/minecraft/server/RegionFileCache.java
++++ b/src/main/java/net/minecraft/server/RegionFileCache.java
+@@ -68,7 +68,7 @@ public class RegionFileCache {
+         return regionfile.a(i & 31, j & 31);
+     }
+ 
+-    public static DataOutputStream d(File file, int i, int j) {
++    public static DataOutputStream d(File file, int i, int j) throws IOException { // KigPaper - add throws
+         RegionFile regionfile = a(file, i, j);
+ 
+         return regionfile.b(i & 31, j & 31);
+diff --git a/src/main/java/org/github/paperspigot/PaperSpigotConfig.java b/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
+index f130e5958..77d0b874c 100644
+--- a/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
++++ b/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
+@@ -13,6 +13,7 @@ import java.util.logging.Level;
+ import net.minecraft.server.Item;
+ import net.minecraft.server.Items;
+ import net.minecraft.server.MinecraftServer;
++import net.minecraft.server.RegionFile;
+ import org.apache.commons.lang.StringUtils;
+ import org.bukkit.Bukkit;
+ import org.bukkit.Material;
+@@ -225,6 +226,8 @@ public class PaperSpigotConfig
+     // KigPaper start
+     public static float knockbackHorizontalMultiplier, knockbackVerticalMultiplier, knockbackHorizontalSprinting, knockbackVerticalSprinting, knockbackFriction;
+     public static boolean betterVehicleHitboxes, nettyReadTimeout, forceConditionalAutoFlush, savePlayerFiles, enableBookDeserialization, accurateMoveTiming, accurateBlockCollisions;
++    public static RegionFile.CompressionAlgorithm regionCompressionAlgorithm;
++
+     private static void knockbackHorizontalMultiplier() {
+         knockbackHorizontalMultiplier = (float) getDouble("knockback.horizontal.normal", 1f);
+     }
+@@ -257,5 +260,8 @@ public class PaperSpigotConfig
+     private static void accurateBlockCollisions() {
+         accurateBlockCollisions = getBoolean("accurate-block-collisions", false);
+     }
++    private static void regionCompressionAlgorithm() {
++        regionCompressionAlgorithm = RegionFile.CompressionAlgorithm.valueOf(getString("region-compression-algo", "ZLIB"));
++    }
+     // KigPaper end
+ }
 -- 
-2.28.0
+2.31.1
 
diff --git a/pom.xml b/pom.xml
index cdd732e5b95a5ebe36738810a8c7ab54610911bd..2d2b97a4341a202512e16bf3df9eafe73397cccc 100644
--- a/pom.xml
+++ b/pom.xml
@@ -100,6 +100,12 @@
             <version>1.3</version>
             <scope>test</scope>
         </dependency>
+        <!-- // KigPaper -->
+        <dependency>
+            <groupId>org.lz4</groupId>
+            <artifactId>lz4-java</artifactId>
+            <version>1.8.0</version>
+        </dependency>
     </dependencies>
 
     <!-- required until fixed plexus-compiler-eclipse is deployed -->
diff --git a/src/main/java/net/minecraft/server/RegionFile.java b/src/main/java/net/minecraft/server/RegionFile.java
index 1e2db5a3df757b102b797486870afdb4cc371661..e113ca8af274f9985c0ac908b819270b80c9e148 100644
--- a/src/main/java/net/minecraft/server/RegionFile.java
+++ b/src/main/java/net/minecraft/server/RegionFile.java
@@ -1,6 +1,10 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Lists;
+import net.jpountz.lz4.LZ4BlockInputStream;
+import net.jpountz.lz4.LZ4BlockOutputStream;
+import net.jpountz.lz4.LZ4Factory;
+import org.github.paperspigot.PaperSpigotConfig;
 import org.github.paperspigot.exception.ServerInternalException;
 
 import java.io.*;
@@ -9,9 +13,11 @@ import java.nio.IntBuffer;
 import java.util.List;
 import java.util.zip.DeflaterOutputStream;
 import java.util.zip.GZIPInputStream;
+import java.util.zip.GZIPOutputStream;
 import java.util.zip.InflaterInputStream;
 
 public class RegionFile {
+    private static final LZ4Factory lz4Factory = LZ4Factory.fastestJavaInstance(); // KigPaper
 
     private static final byte[] a = new byte[4096]; // Spigot - note: if this ever changes to not be 4096 bytes, update constructor! // PAIL: empty 4k block
     private final File b;
@@ -161,14 +167,26 @@ public class RegionFile {
                             byte b0 = this.c.readByte();
                             byte[] abyte;
 
-                            if (b0 == 1) {
+                            if (b0 == CompressionAlgorithm.NONE.ordinal()) {
+                                // KigPaper start - add no decompression
+                                abyte = new byte[j1 - 1];
+                                this.c.read(abyte);
+                                return new DataInputStream(new BufferedInputStream(new ByteArrayInputStream(abyte)));
+                                // KigPaper end
+                            } else if (b0 == CompressionAlgorithm.GZIP.ordinal()) {
                                 abyte = new byte[j1 - 1];
                                 this.c.read(abyte);
                                 return new DataInputStream(new BufferedInputStream(new GZIPInputStream(new ByteArrayInputStream(abyte))));
-                            } else if (b0 == 2) {
+                            } else if (b0 == CompressionAlgorithm.ZLIB.ordinal()) {
                                 abyte = new byte[j1 - 1];
                                 this.c.read(abyte);
                                 return new DataInputStream(new BufferedInputStream(new InflaterInputStream(new ByteArrayInputStream(abyte))));
+                            } else if (b0 == CompressionAlgorithm.LZ4.ordinal()) {
+                                // KigPaper start - add LZ4 decompression
+                                abyte = new byte[j1 - 1];
+                                this.c.read(abyte);
+                                return new DataInputStream(new BufferedInputStream(new LZ4BlockInputStream(new ByteArrayInputStream(abyte), lz4Factory.fastDecompressor())));
+                                // KigPaper end
                             } else {
                                 return null;
                             }
@@ -181,9 +199,32 @@ public class RegionFile {
         }
     }
 
-    public DataOutputStream b(int i, int j) { // PAIL: getChunkOutputStream
+    public DataOutputStream b(int i, int j) throws IOException { // PAIL: getChunkOutputStream // KigPaper - add throws
         // PAIL: isInvalidRegion
-        return this.d(i, j) ? null : new DataOutputStream(new java.io.BufferedOutputStream(new DeflaterOutputStream(new RegionFile.ChunkBuffer(i, j)))); // Spigot - use a BufferedOutputStream to greatly improve file write performance
+        if (this.d(i, j)) {
+            return null;
+        }
+        // KigPaper start - add alternative compression algorithms
+        ChunkBuffer buffer = new RegionFile.ChunkBuffer(i, j);
+        OutputStream stream;
+        switch (PaperSpigotConfig.regionCompressionAlgorithm) {
+            case NONE:
+                stream = buffer;
+                break;
+            case GZIP:
+                stream = new GZIPOutputStream(buffer); // Normally not supported by the Notchian server
+                break;
+            case ZLIB:
+                stream = new DeflaterOutputStream(buffer);
+                break;
+            case LZ4:
+                stream = new LZ4BlockOutputStream(buffer, 65536, lz4Factory.fastCompressor());
+                break;
+            default:
+                throw new UnsupportedEncodingException("invalid compression algorithm");
+        }
+        return new DataOutputStream(new BufferedOutputStream(stream));
+        // KigPaper end
     }
 
     protected synchronized void a(int i, int j, byte[] abyte, int k) {
@@ -262,9 +303,9 @@ public class RegionFile {
     }
 
     private void a(int i, byte[] abyte, int j) throws IOException {
-        this.c.seek((long) (i * 4096));
+        this.c.seek(i * 4096L);
         this.c.writeInt(j + 1);
-        this.c.writeByte(2);
+        this.c.writeByte(PaperSpigotConfig.regionCompressionAlgorithm.ordinal());
         this.c.write(abyte, 0, j);
     }
 
@@ -314,4 +355,13 @@ public class RegionFile {
             RegionFile.this.a(this.b, this.c, this.buf, this.count);
         }
     }
+
+    // KigPaper start
+    public enum CompressionAlgorithm {
+        NONE,
+        GZIP,
+        ZLIB,
+        LZ4 // KigPaper
+    }
+    // KigPaper end
 }
diff --git a/src/main/java/net/minecraft/server/RegionFileCache.java b/src/main/java/net/minecraft/server/RegionFileCache.java
index 4cfaf3005f94881d01e11f9bf9a771da141e190c..6329952258a1637f340209c367099625707cce49 100644
--- a/src/main/java/net/minecraft/server/RegionFileCache.java
+++ b/src/main/java/net/minecraft/server/RegionFileCache.java
@@ -68,7 +68,7 @@ public class RegionFileCache {
         return regionfile.a(i & 31, j & 31);
     }
 
-    public static DataOutputStream d(File file, int i, int j) {
+    public static DataOutputStream d(File file, int i, int j) throws IOException { // KigPaper - add throws
         RegionFile regionfile = a(file, i, j);
 
         return regionfile.b(i & 31, j & 31);
diff --git a/src/main/java/org/github/paperspigot/PaperSpigotConfig.java b/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
index ae31341e34d54f3b4b9bc918924863863be1d7d2..78f38ce5a15edda5cb9a4fae9acf1f4cd92e083f 100644
--- a/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
+++ b/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
@@ -13,6 +13,7 @@ import java.util.logging.Level;
 import net.minecraft.server.Item;
 import net.minecraft.server.Items;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.RegionFile;
 import org.apache.commons.lang.StringUtils;
 import org.bukkit.Bukkit;
 import org.bukkit.Material;
@@ -244,4 +245,11 @@ public class PaperSpigotConfig
     {
         pearlPassthroughSlab = getBoolean( "pearl-passthrough.slab", true );
     }
+
+    // KigPaper start
+    public static RegionFile.CompressionAlgorithm regionCompressionAlgorithm;
+    private static void regionCompressionAlgorithm() {
+        regionCompressionAlgorithm = RegionFile.CompressionAlgorithm.valueOf(getString("region-compression-algo", "ZLIB"));
+    }
+    // KigPaper end
 }
