From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: RoccoDev <hey@rocco.dev>
Date: Fri, 23 Apr 2021 18:49:13 +0200
Subject: [PATCH] (KigPaper) Add setType without lighting update API


diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index a00806ba68ed9ac0147b4fd0aea89f8861f38653..223a8aa445b82d0e231695e424e27f1a84c9fe41 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -568,7 +568,8 @@ public class Chunk {
         return this.g(blockposition.getX() & 15, blockposition.getY(), blockposition.getZ() & 15);
     }
 
-    public IBlockData a(BlockPosition blockposition, IBlockData iblockdata) {
+    // KigPaper - add updateLight param
+    public IBlockData a(BlockPosition blockposition, IBlockData iblockdata, boolean updateLight) {
         int i = blockposition.getX() & 15;
         int j = blockposition.getY();
         int k = blockposition.getZ() & 15;
@@ -612,7 +613,7 @@ public class Chunk {
             } else {
                 if (flag) {
                     this.initLighting();
-                } else {
+                } else if (updateLight) { // KigPaper - conditional light update
                     int j1 = block.p();
                     int k1 = block1.p();
 
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 2732e92a63fc5420908e5d4f4c0680cb4dadc94d..20ed797cecf202832f87dd523a840d0f9f29ae2b 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -368,7 +368,12 @@ public abstract class World implements IBlockAccess {
         return this.chunkProvider.getOrCreateChunk(i, j);
     }
 
+    // KigPaper start
     public boolean setTypeAndData(BlockPosition blockposition, IBlockData iblockdata, int i) {
+        return this.setTypeAndData(blockposition, iblockdata, i, true);
+    }
+
+    public boolean setTypeAndData(BlockPosition blockposition, IBlockData iblockdata, int i, boolean updateLight) { // KigPaper end - add updateLight param
         // CraftBukkit start - tree generation
         if (this.captureTreeGeneration) {
             BlockState blockstate = null;
@@ -406,7 +411,7 @@ public abstract class World implements IBlockAccess {
             }
             // CraftBukkit end
 
-            IBlockData iblockdata1 = chunk.a(blockposition, iblockdata);
+            IBlockData iblockdata1 = chunk.a(blockposition, iblockdata, updateLight); // KigPaper - add updateLight
 
             if (iblockdata1 == null) {
                 // CraftBukkit start - remove blockstate if failed
@@ -418,7 +423,7 @@ public abstract class World implements IBlockAccess {
             } else {
                 Block block1 = iblockdata1.getBlock();
 
-                if (block.p() != block1.p() || block.r() != block1.r()) {
+                if (updateLight && (block.p() != block1.p() || block.r() != block1.r())) { // KigPaper - add updateLight param
                     this.methodProfiler.a("checkLight");
                     this.x(blockposition);
                     this.methodProfiler.b();
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
index 22a80551b5df5920499767a66a9932b9e77b5fb1..c7390e0c695432e0a225271c9b7a6b910b90638b 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
@@ -117,26 +117,26 @@ public class CraftBlock implements Block {
     }
 
     @Override
-    public void setType(Material type, boolean applyPhysics) {
-        setTypeId(type.getId(), applyPhysics);
+    public void setType(Material type, boolean applyPhysics, boolean updateLight) {
+        setTypeId(type.getId(), applyPhysics, updateLight);
     }
 
     public boolean setTypeId(final int type) {
         return setTypeId(type, true);
     }
 
-    public boolean setTypeId(final int type, final boolean applyPhysics) {
+    public boolean setTypeId(final int type, final boolean applyPhysics, boolean updateLight) {
         net.minecraft.server.Block block = getNMSBlock(type);
-        return setTypeIdAndData(type, (byte) block.toLegacyData(block.getBlockData()), applyPhysics);
+        return setTypeIdAndData(type, (byte) block.toLegacyData(block.getBlockData()), applyPhysics, updateLight);
     }
 
-    public boolean setTypeIdAndData(final int type, final byte data, final boolean applyPhysics) {
+    public boolean setTypeIdAndData(final int type, final byte data, final boolean applyPhysics, boolean updateLight) { // KigPaper - add updateLight param
         IBlockData blockData = getNMSBlock(type).fromLegacyData(data);
         BlockPosition position = new BlockPosition(x, y, z);
         if (applyPhysics) {
-            return chunk.getHandle().getWorld().setTypeAndData(position, blockData, 3);
+            return chunk.getHandle().getWorld().setTypeAndData(position, blockData, 3, updateLight);
         } else {
-            boolean success = chunk.getHandle().getWorld().setTypeAndData(position, blockData, 2);
+            boolean success = chunk.getHandle().getWorld().setTypeAndData(position, blockData, 2, updateLight);
             if (success) {
                 chunk.getHandle().getWorld().notify(position);
             }
