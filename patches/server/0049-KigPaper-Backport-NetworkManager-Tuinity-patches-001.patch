From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: RoccoDev <hey@rocco.dev>
Date: Thu, 4 Mar 2021 20:33:48 +0100
Subject: [PATCH] (KigPaper) Backport NetworkManager Tuinity patches (0017,
 0018)


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index b51a2a3cc7ef9043f6885380eca66340a695a782..5a8a22ab29cc313921e4b2fdca874925070c8564 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -862,7 +862,25 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
                 this.methodProfiler.b();
                 this.methodProfiler.a("tracker");
                 worldserver.timings.tracker.startTiming(); // Spigot
-                worldserver.getTracker().updatePlayers();
+                // KigPaper start - Tuinity-0018
+                if(this.getPlayerList().getPlayerCount() != 0) {
+                    List<NetworkManager> disabledFlushes = new ArrayList<>(this.getPlayerList().getPlayerCount());
+                    for(EntityPlayer player : this.getPlayerList().players) {
+                        PlayerConnection connection = player.playerConnection;
+                        if(connection != null) {
+                            connection.networkManager.disableAutomaticFlush();
+                            disabledFlushes.add(connection.networkManager);
+                        }
+                    }
+                    try {
+                        worldserver.getTracker().updatePlayers();
+                    } finally {
+                        for(NetworkManager networkManager : disabledFlushes) {
+                            networkManager.enableAutomaticFlush();
+                        }
+                    }
+                }
+                // KigPaper end
                 worldserver.timings.tracker.stopTiming(); // Spigot
                 this.methodProfiler.b();
                 this.methodProfiler.b();
diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
index e1e7bb6c0e040ef4b7145f44f25b58a93a56f82c..61d7f72e30c1b27a34cbacaa1f187be6df5a6898 100644
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -17,7 +17,9 @@ import io.netty.util.AttributeKey;
 import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.GenericFutureListener;
 import java.net.SocketAddress;
+import java.util.Iterator;
 import java.util.Queue;
+import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 import javax.crypto.SecretKey;
 import org.apache.commons.lang3.ArrayUtils;
@@ -75,6 +77,34 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
     private boolean o;
     private boolean p;
 
+    // KigPaper start - Tuinity-0017
+    private volatile boolean canFlush = true;
+    private final AtomicInteger packetWrites = new AtomicInteger();
+    private int flushPacketsStart;
+    private final Object flushLock = new Object();
+
+    public void disableAutomaticFlush() {
+        synchronized (this.flushLock) {
+            this.flushPacketsStart = this.packetWrites.get();
+            this.canFlush = true;
+        }
+    }
+
+    public void enableAutomaticFlush() {
+        synchronized (this.flushLock) {
+            this.canFlush = true;
+            if (this.packetWrites.get() != this.flushPacketsStart) {
+                this.flush();
+            }
+        }
+    }
+
+    private void flush() {
+        if(this.channel.eventLoop().inEventLoop()) this.channel.flush();
+        else this.channel.eventLoop().execute(() -> this.channel.flush());
+    }
+    // KigPaper end
+
     public NetworkManager(EnumProtocolDirection enumprotocoldirection) {
         this.h = enumprotocoldirection;
     }
@@ -138,7 +168,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
     public void handle(Packet packet) {
         if (this.g()) {
             this.m();
-            this.a(packet, (GenericFutureListener[]) null);
+            this.a(packet, (GenericFutureListener[]) null, true /* KigPaper */);
         } else {
             this.j.writeLock().lock();
 
@@ -154,7 +184,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
     public void a(Packet packet, GenericFutureListener<? extends Future<? super Void>> genericfuturelistener, GenericFutureListener<? extends Future<? super Void>>... agenericfuturelistener) {
         if (this.g()) {
             this.m();
-            this.a(packet, (GenericFutureListener[]) ArrayUtils.add(agenericfuturelistener, 0, genericfuturelistener));
+            this.a(packet, (GenericFutureListener[]) ArrayUtils.add(agenericfuturelistener, 0, genericfuturelistener), true /* KigPaper */);
         } else {
             this.j.writeLock().lock();
 
@@ -167,10 +197,15 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
 
     }
 
-    private void a(final Packet packet, final GenericFutureListener<? extends Future<? super Void>>[] agenericfuturelistener) {
+    private void a(final Packet packet, final GenericFutureListener<? extends Future<? super Void>>[] agenericfuturelistener, boolean flush /* KigPaper */) {
         final EnumProtocol enumprotocol = EnumProtocol.a(packet);
         final EnumProtocol enumprotocol1 = (EnumProtocol) this.channel.attr(NetworkManager.c).get();
 
+        // KigPaper start
+        packetWrites.getAndIncrement();
+        boolean doFlush = (flush || packet instanceof PacketPlayOutKeepAlive || packet instanceof PacketPlayOutKickDisconnect || packet instanceof PacketLoginOutDisconnect);
+        // KigPaper end
+
         if (enumprotocol1 != enumprotocol) {
             NetworkManager.g.debug("Disabled auto read");
             this.channel.config().setAutoRead(false);
@@ -181,7 +216,8 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
                 this.a(enumprotocol);
             }
 
-            ChannelFuture channelfuture = this.channel.writeAndFlush(packet);
+            //ChannelFuture channelfuture = this.channel.writeAndFlush(packet); // KigPaper
+            ChannelFuture channelfuture = doFlush ? this.channel.writeAndFlush(packet) : this.channel.write(packet);
 
             if (agenericfuturelistener != null) {
                 channelfuture.addListeners(agenericfuturelistener);
@@ -195,7 +231,8 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
                         NetworkManager.this.a(enumprotocol);
                     }
 
-                    ChannelFuture channelfuture = NetworkManager.this.channel.writeAndFlush(packet);
+                    //ChannelFuture channelfuture = NetworkManager.this.channel.writeAndFlush(packet); // KigPaper
+                    ChannelFuture channelfuture = doFlush ? NetworkManager.this.channel.writeAndFlush(packet) : NetworkManager.this.channel.write(packet);
 
                     if (agenericfuturelistener != null) {
                         channelfuture.addListeners(agenericfuturelistener);
@@ -211,13 +248,25 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
     private void m() {
         if (this.channel != null && this.channel.isOpen()) {
             this.j.readLock().lock();
-
+            boolean packetWritten = false; // KigPaper
             try {
+                // KigPaper start
+                Iterator<QueuedPacket> iterator = this.i.iterator();
+                while(iterator.hasNext()) {
+                    QueuedPacket packet = iterator.next();
+                    Packet raw = packet.a;
+                    if(packetWritten && this.canFlush) flush();
+                    iterator.remove();
+                    this.a(raw, packet.b, !iterator.hasNext() && this.canFlush);
+                    packetWritten = true;
+                }
+                // KigPaper end
+                /*
                 while (!this.i.isEmpty()) {
                     NetworkManager.QueuedPacket networkmanager_queuedpacket = (NetworkManager.QueuedPacket) this.i.poll();
 
                     this.a(networkmanager_queuedpacket.a, networkmanager_queuedpacket.b);
-                }
+                }*/
             } finally {
                 this.j.readLock().unlock();
             }
