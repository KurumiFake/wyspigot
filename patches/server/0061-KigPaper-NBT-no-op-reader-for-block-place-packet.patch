From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: RoccoDev <hey@rocco.dev>
Date: Mon, 26 Apr 2021 18:28:33 +0200
Subject: [PATCH] (KigPaper) NBT no-op reader for block place packet


diff --git a/patch.diff b/patch.diff
new file mode 100644
index 0000000000000000000000000000000000000000..a0946e7025cbe6a0b28b842c3ead06e45bc4e011
--- /dev/null
+++ b/patch.diff
@@ -0,0 +1,43 @@
+diff --git a/src/main/java/net/minecraft/server/PacketPlayInBlockPlace.java b/src/main/java/net/minecraft/server/PacketPlayInBlockPlace.java
+index 02d8e07f8..b305ee0f3 100644
+--- a/src/main/java/net/minecraft/server/PacketPlayInBlockPlace.java
++++ b/src/main/java/net/minecraft/server/PacketPlayInBlockPlace.java
+@@ -1,5 +1,7 @@
+ package net.minecraft.server;
+ 
++import io.netty.handler.codec.DecoderException;
++
+ import java.io.IOException;
+ 
+ public class PacketPlayInBlockPlace implements Packet<PacketListenerPlayIn> {
+@@ -33,7 +35,12 @@ public class PacketPlayInBlockPlace implements Packet<PacketListenerPlayIn> {
+         timestamp = System.currentTimeMillis(); // CraftBukkit
+         this.b = packetdataserializer.c();
+         this.c = packetdataserializer.readUnsignedByte();
+-        this.d = packetdataserializer.i();
++        // KigPaper start - don't parse itemstack
++        // this.d = packetdataserializer.i();
++        // Consume everything and leave 3 bytes at the end
++        if (packetdataserializer.readableBytes() < 3) throw new DecoderException("Expected 3 facing bytes");
++        packetdataserializer.skipBytes(packetdataserializer.readableBytes() - 3);
++        // KigPaper end
+         this.e = (float) packetdataserializer.readUnsignedByte() / 16.0F;
+         this.f = (float) packetdataserializer.readUnsignedByte() / 16.0F;
+         this.g = (float) packetdataserializer.readUnsignedByte() / 16.0F;
+diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
+index 8f6dfdb40..72545b297 100644
+--- a/src/main/java/net/minecraft/server/PlayerConnection.java
++++ b/src/main/java/net/minecraft/server/PlayerConnection.java
+@@ -793,7 +793,8 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
+             this.player.activeContainer.b();
+             this.player.g = false;
+             // CraftBukkit - TODO CHECK IF NEEDED -- new if structure might not need 'always'. Kept it in for now, but may be able to remove in future
+-            if (!ItemStack.matches(this.player.inventory.getItemInHand(), packetplayinblockplace.getItemStack()) || always) {
++            //if (!ItemStack.matches(this.player.inventory.getItemInHand(), packetplayinblockplace.getItemStack()) || always) { // KigPaper
++            if (always) {
+                 this.sendPacket(new PacketPlayOutSetSlot(this.player.activeContainer.windowId, slot.rawSlotIndex, this.player.inventory.getItemInHand()));
+             }
+         }
+-- 
+2.28.0
+
diff --git a/src/main/java/net/minecraft/server/PacketPlayInBlockPlace.java b/src/main/java/net/minecraft/server/PacketPlayInBlockPlace.java
index 02d8e07f89b817b830ddf495f0ce789f7780c340..b305ee0f317efded63005965f09e49704a72251d 100644
--- a/src/main/java/net/minecraft/server/PacketPlayInBlockPlace.java
+++ b/src/main/java/net/minecraft/server/PacketPlayInBlockPlace.java
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import io.netty.handler.codec.DecoderException;
+
 import java.io.IOException;
 
 public class PacketPlayInBlockPlace implements Packet<PacketListenerPlayIn> {
@@ -33,7 +35,12 @@ public class PacketPlayInBlockPlace implements Packet<PacketListenerPlayIn> {
         timestamp = System.currentTimeMillis(); // CraftBukkit
         this.b = packetdataserializer.c();
         this.c = packetdataserializer.readUnsignedByte();
-        this.d = packetdataserializer.i();
+        // KigPaper start - don't parse itemstack
+        // this.d = packetdataserializer.i();
+        // Consume everything and leave 3 bytes at the end
+        if (packetdataserializer.readableBytes() < 3) throw new DecoderException("Expected 3 facing bytes");
+        packetdataserializer.skipBytes(packetdataserializer.readableBytes() - 3);
+        // KigPaper end
         this.e = (float) packetdataserializer.readUnsignedByte() / 16.0F;
         this.f = (float) packetdataserializer.readUnsignedByte() / 16.0F;
         this.g = (float) packetdataserializer.readUnsignedByte() / 16.0F;
