From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: RoccoDev <hey@rocco.dev>
Date: Sat, 30 Oct 2021 20:04:08 +0200
Subject: [PATCH] (KigPaper) Add zstd region compression


diff --git a/patch.diff b/patch.diff
deleted file mode 100644
index b78df401d368db24edf00bccbec7396ff8281abc..0000000000000000000000000000000000000000
--- a/patch.diff
+++ /dev/null
@@ -1,180 +0,0 @@
-diff --git a/pom.xml b/pom.xml
-index 2be32c45c..75b6f5099 100644
---- a/pom.xml
-+++ b/pom.xml
-@@ -89,6 +89,12 @@
-             <version>1.3</version>
-             <scope>test</scope>
-         </dependency>
-+        <!-- // KigPaper -->
-+        <dependency>
-+            <groupId>org.lz4</groupId>
-+            <artifactId>lz4-java</artifactId>
-+            <version>1.8.0</version>
-+        </dependency>
-     </dependencies>
- 
-     <!-- required until fixed plexus-compiler-eclipse is deployed -->
-diff --git a/src/main/java/net/minecraft/server/RegionFile.java b/src/main/java/net/minecraft/server/RegionFile.java
-index 1e2db5a3d..e113ca8af 100644
---- a/src/main/java/net/minecraft/server/RegionFile.java
-+++ b/src/main/java/net/minecraft/server/RegionFile.java
-@@ -1,6 +1,10 @@
- package net.minecraft.server;
- 
- import com.google.common.collect.Lists;
-+import net.jpountz.lz4.LZ4BlockInputStream;
-+import net.jpountz.lz4.LZ4BlockOutputStream;
-+import net.jpountz.lz4.LZ4Factory;
-+import org.github.paperspigot.PaperSpigotConfig;
- import org.github.paperspigot.exception.ServerInternalException;
- 
- import java.io.*;
-@@ -9,9 +13,11 @@ import java.nio.IntBuffer;
- import java.util.List;
- import java.util.zip.DeflaterOutputStream;
- import java.util.zip.GZIPInputStream;
-+import java.util.zip.GZIPOutputStream;
- import java.util.zip.InflaterInputStream;
- 
- public class RegionFile {
-+    private static final LZ4Factory lz4Factory = LZ4Factory.fastestJavaInstance(); // KigPaper
- 
-     private static final byte[] a = new byte[4096]; // Spigot - note: if this ever changes to not be 4096 bytes, update constructor! // PAIL: empty 4k block
-     private final File b;
-@@ -161,14 +167,26 @@ public class RegionFile {
-                             byte b0 = this.c.readByte();
-                             byte[] abyte;
- 
--                            if (b0 == 1) {
-+                            if (b0 == CompressionAlgorithm.NONE.ordinal()) {
-+                                // KigPaper start - add no decompression
-+                                abyte = new byte[j1 - 1];
-+                                this.c.read(abyte);
-+                                return new DataInputStream(new BufferedInputStream(new ByteArrayInputStream(abyte)));
-+                                // KigPaper end
-+                            } else if (b0 == CompressionAlgorithm.GZIP.ordinal()) {
-                                 abyte = new byte[j1 - 1];
-                                 this.c.read(abyte);
-                                 return new DataInputStream(new BufferedInputStream(new GZIPInputStream(new ByteArrayInputStream(abyte))));
--                            } else if (b0 == 2) {
-+                            } else if (b0 == CompressionAlgorithm.ZLIB.ordinal()) {
-                                 abyte = new byte[j1 - 1];
-                                 this.c.read(abyte);
-                                 return new DataInputStream(new BufferedInputStream(new InflaterInputStream(new ByteArrayInputStream(abyte))));
-+                            } else if (b0 == CompressionAlgorithm.LZ4.ordinal()) {
-+                                // KigPaper start - add LZ4 decompression
-+                                abyte = new byte[j1 - 1];
-+                                this.c.read(abyte);
-+                                return new DataInputStream(new BufferedInputStream(new LZ4BlockInputStream(new ByteArrayInputStream(abyte), lz4Factory.fastDecompressor())));
-+                                // KigPaper end
-                             } else {
-                                 return null;
-                             }
-@@ -181,9 +199,32 @@ public class RegionFile {
-         }
-     }
- 
--    public DataOutputStream b(int i, int j) { // PAIL: getChunkOutputStream
-+    public DataOutputStream b(int i, int j) throws IOException { // PAIL: getChunkOutputStream // KigPaper - add throws
-         // PAIL: isInvalidRegion
--        return this.d(i, j) ? null : new DataOutputStream(new java.io.BufferedOutputStream(new DeflaterOutputStream(new RegionFile.ChunkBuffer(i, j)))); // Spigot - use a BufferedOutputStream to greatly improve file write performance
-+        if (this.d(i, j)) {
-+            return null;
-+        }
-+        // KigPaper start - add alternative compression algorithms
-+        ChunkBuffer buffer = new RegionFile.ChunkBuffer(i, j);
-+        OutputStream stream;
-+        switch (PaperSpigotConfig.regionCompressionAlgorithm) {
-+            case NONE:
-+                stream = buffer;
-+                break;
-+            case GZIP:
-+                stream = new GZIPOutputStream(buffer); // Normally not supported by the Notchian server
-+                break;
-+            case ZLIB:
-+                stream = new DeflaterOutputStream(buffer);
-+                break;
-+            case LZ4:
-+                stream = new LZ4BlockOutputStream(buffer, 65536, lz4Factory.fastCompressor());
-+                break;
-+            default:
-+                throw new UnsupportedEncodingException("invalid compression algorithm");
-+        }
-+        return new DataOutputStream(new BufferedOutputStream(stream));
-+        // KigPaper end
-     }
- 
-     protected synchronized void a(int i, int j, byte[] abyte, int k) {
-@@ -262,9 +303,9 @@ public class RegionFile {
-     }
- 
-     private void a(int i, byte[] abyte, int j) throws IOException {
--        this.c.seek((long) (i * 4096));
-+        this.c.seek(i * 4096L);
-         this.c.writeInt(j + 1);
--        this.c.writeByte(2);
-+        this.c.writeByte(PaperSpigotConfig.regionCompressionAlgorithm.ordinal());
-         this.c.write(abyte, 0, j);
-     }
- 
-@@ -314,4 +355,13 @@ public class RegionFile {
-             RegionFile.this.a(this.b, this.c, this.buf, this.count);
-         }
-     }
-+
-+    // KigPaper start
-+    public enum CompressionAlgorithm {
-+        NONE,
-+        GZIP,
-+        ZLIB,
-+        LZ4 // KigPaper
-+    }
-+    // KigPaper end
- }
-diff --git a/src/main/java/net/minecraft/server/RegionFileCache.java b/src/main/java/net/minecraft/server/RegionFileCache.java
-index 4cfaf3005..632995225 100644
---- a/src/main/java/net/minecraft/server/RegionFileCache.java
-+++ b/src/main/java/net/minecraft/server/RegionFileCache.java
-@@ -68,7 +68,7 @@ public class RegionFileCache {
-         return regionfile.a(i & 31, j & 31);
-     }
- 
--    public static DataOutputStream d(File file, int i, int j) {
-+    public static DataOutputStream d(File file, int i, int j) throws IOException { // KigPaper - add throws
-         RegionFile regionfile = a(file, i, j);
- 
-         return regionfile.b(i & 31, j & 31);
-diff --git a/src/main/java/org/github/paperspigot/PaperSpigotConfig.java b/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
-index f130e5958..77d0b874c 100644
---- a/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
-+++ b/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
-@@ -13,6 +13,7 @@ import java.util.logging.Level;
- import net.minecraft.server.Item;
- import net.minecraft.server.Items;
- import net.minecraft.server.MinecraftServer;
-+import net.minecraft.server.RegionFile;
- import org.apache.commons.lang.StringUtils;
- import org.bukkit.Bukkit;
- import org.bukkit.Material;
-@@ -225,6 +226,8 @@ public class PaperSpigotConfig
-     // KigPaper start
-     public static float knockbackHorizontalMultiplier, knockbackVerticalMultiplier, knockbackHorizontalSprinting, knockbackVerticalSprinting, knockbackFriction;
-     public static boolean betterVehicleHitboxes, nettyReadTimeout, forceConditionalAutoFlush, savePlayerFiles, enableBookDeserialization, accurateMoveTiming, accurateBlockCollisions;
-+    public static RegionFile.CompressionAlgorithm regionCompressionAlgorithm;
-+
-     private static void knockbackHorizontalMultiplier() {
-         knockbackHorizontalMultiplier = (float) getDouble("knockback.horizontal.normal", 1f);
-     }
-@@ -257,5 +260,8 @@ public class PaperSpigotConfig
-     private static void accurateBlockCollisions() {
-         accurateBlockCollisions = getBoolean("accurate-block-collisions", false);
-     }
-+    private static void regionCompressionAlgorithm() {
-+        regionCompressionAlgorithm = RegionFile.CompressionAlgorithm.valueOf(getString("region-compression-algo", "ZLIB"));
-+    }
-     // KigPaper end
- }
--- 
-2.31.1
-
diff --git a/pom.xml b/pom.xml
index 2d2b97a4341a202512e16bf3df9eafe73397cccc..f035ac19ec636b9eb85875ee50046af927cfbfed 100644
--- a/pom.xml
+++ b/pom.xml
@@ -100,12 +100,18 @@
             <version>1.3</version>
             <scope>test</scope>
         </dependency>
-        <!-- // KigPaper -->
+        <!-- // KigPaper start -->
         <dependency>
             <groupId>org.lz4</groupId>
             <artifactId>lz4-java</artifactId>
             <version>1.8.0</version>
         </dependency>
+        <dependency>
+            <groupId>com.github.luben</groupId>
+            <artifactId>zstd-jni</artifactId>
+            <version>1.5.0-4</version>
+        </dependency>
+        <!-- // KigPaper end -->
     </dependencies>
 
     <!-- required until fixed plexus-compiler-eclipse is deployed -->
diff --git a/src/main/java/net/minecraft/server/ChunkRegionLoader.java b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
index 7889b91e705fcd1b221d0156e08b1dafe28e5eab..7296a132e440b0aa136caf2744d702c7a6d3fa5d 100644
--- a/src/main/java/net/minecraft/server/ChunkRegionLoader.java
+++ b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
@@ -63,13 +63,16 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
         NBTTagCompound nbttagcompound = (NBTTagCompound) this.b.get(chunkcoordintpair);
 
         if (nbttagcompound == null) {
-            DataInputStream datainputstream = RegionFileCache.c(this.d, i, j);
+            // KigPaper - use try-with-resources
+            // While this is always a ByteArrayInputStream (which does nothing on close), this is not something to be relied upon.
+            try (DataInputStream datainputstream = RegionFileCache.c(this.d, i, j)) {
 
-            if (datainputstream == null) {
-                return null;
-            }
+                if (datainputstream == null) {
+                    return null;
+                }
 
-            nbttagcompound = NBTCompressedStreamTools.a(datainputstream);
+                nbttagcompound = NBTCompressedStreamTools.a(datainputstream);
+            }
         }
 
         return this.a(world, i, j, nbttagcompound);
@@ -176,10 +179,10 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
     }
 
     private void b(ChunkCoordIntPair chunkcoordintpair, NBTTagCompound nbttagcompound) throws IOException {
-        DataOutputStream dataoutputstream = RegionFileCache.d(this.d, chunkcoordintpair.x, chunkcoordintpair.z);
-
-        NBTCompressedStreamTools.a(nbttagcompound, (DataOutput) dataoutputstream);
-        dataoutputstream.close();
+        // KigPaper - use try-with-resources
+        try (DataOutputStream dataoutputstream = RegionFileCache.d(this.d, chunkcoordintpair.x, chunkcoordintpair.z)) {
+            NBTCompressedStreamTools.a(nbttagcompound, (DataOutput) dataoutputstream);
+        }
     }
 
     public void b(World world, Chunk chunk) throws IOException {}
diff --git a/src/main/java/net/minecraft/server/RegionFile.java b/src/main/java/net/minecraft/server/RegionFile.java
index e113ca8af274f9985c0ac908b819270b80c9e148..61315bf53b4d9f8cb16988d736b77a69e1451ee1 100644
--- a/src/main/java/net/minecraft/server/RegionFile.java
+++ b/src/main/java/net/minecraft/server/RegionFile.java
@@ -1,5 +1,8 @@
 package net.minecraft.server;
 
+import com.github.luben.zstd.ZstdInputStreamNoFinalizer;
+import com.github.luben.zstd.ZstdOutputStream;
+import com.github.luben.zstd.ZstdOutputStreamNoFinalizer;
 import com.google.common.collect.Lists;
 import net.jpountz.lz4.LZ4BlockInputStream;
 import net.jpountz.lz4.LZ4BlockOutputStream;
@@ -167,25 +170,32 @@ public class RegionFile {
                             byte b0 = this.c.readByte();
                             byte[] abyte;
 
+                            // KigPaper - add additional compression algorithms, and remove usage of BufferedInputStreams (as they're buffering a byte array)
                             if (b0 == CompressionAlgorithm.NONE.ordinal()) {
                                 // KigPaper start - add no decompression
                                 abyte = new byte[j1 - 1];
                                 this.c.read(abyte);
-                                return new DataInputStream(new BufferedInputStream(new ByteArrayInputStream(abyte)));
+                                return new DataInputStream(new ByteArrayInputStream(abyte));
                                 // KigPaper end
                             } else if (b0 == CompressionAlgorithm.GZIP.ordinal()) {
                                 abyte = new byte[j1 - 1];
                                 this.c.read(abyte);
-                                return new DataInputStream(new BufferedInputStream(new GZIPInputStream(new ByteArrayInputStream(abyte))));
+                                return new DataInputStream(new GZIPInputStream(new ByteArrayInputStream(abyte)));
                             } else if (b0 == CompressionAlgorithm.ZLIB.ordinal()) {
                                 abyte = new byte[j1 - 1];
                                 this.c.read(abyte);
-                                return new DataInputStream(new BufferedInputStream(new InflaterInputStream(new ByteArrayInputStream(abyte))));
+                                return new DataInputStream(new InflaterInputStream(new ByteArrayInputStream(abyte)));
                             } else if (b0 == CompressionAlgorithm.LZ4.ordinal()) {
                                 // KigPaper start - add LZ4 decompression
                                 abyte = new byte[j1 - 1];
                                 this.c.read(abyte);
-                                return new DataInputStream(new BufferedInputStream(new LZ4BlockInputStream(new ByteArrayInputStream(abyte), lz4Factory.fastDecompressor())));
+                                return new DataInputStream(new LZ4BlockInputStream(new ByteArrayInputStream(abyte), lz4Factory.fastDecompressor()));
+                                // KigPaper end
+                            } else if (b0 == CompressionAlgorithm.ZSTD.ordinal()) {
+                                // KigPaper start - add Zstandard decompression
+                                abyte = new byte[j1 - 1];
+                                this.c.read(abyte);
+                                return new DataInputStream(new ZstdInputStreamNoFinalizer(new ByteArrayInputStream(abyte)));
                                 // KigPaper end
                             } else {
                                 return null;
@@ -220,6 +230,9 @@ public class RegionFile {
             case LZ4:
                 stream = new LZ4BlockOutputStream(buffer, 65536, lz4Factory.fastCompressor());
                 break;
+            case ZSTD:
+                stream = new ZstdOutputStreamNoFinalizer(buffer);
+                break;
             default:
                 throw new UnsupportedEncodingException("invalid compression algorithm");
         }
@@ -361,7 +374,8 @@ public class RegionFile {
         NONE,
         GZIP,
         ZLIB,
-        LZ4 // KigPaper
+        LZ4, // KigPaper
+        ZSTD // KigPaper
     }
     // KigPaper end
 }
diff --git a/src/main/java/org/github/paperspigot/PaperSpigotConfig.java b/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
index 78f38ce5a15edda5cb9a4fae9acf1f4cd92e083f..49cc9b43b094afa175e1e8afd202143e4f6a1b0f 100644
--- a/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
+++ b/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
@@ -249,7 +249,7 @@ public class PaperSpigotConfig
     // KigPaper start
     public static RegionFile.CompressionAlgorithm regionCompressionAlgorithm;
     private static void regionCompressionAlgorithm() {
-        regionCompressionAlgorithm = RegionFile.CompressionAlgorithm.valueOf(getString("region-compression-algo", "ZLIB"));
+        regionCompressionAlgorithm = RegionFile.CompressionAlgorithm.valueOf(getString("region-compression-algo", "ZLIB").toUpperCase(Locale.ROOT));
     }
     // KigPaper end
 }
