From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LinsaFTW <25271111+linsaftw@users.noreply.github.com>
Date: Sun, 12 Dec 2021 11:42:48 -0300
Subject: [PATCH] (FlamePaper) Customizable knockback


diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java
index 0ad4edb8390f396d935d321caf67af0f209d5420..ed3081d1318fdeb1dd48bd047aa7e26abb87c10d 100644
--- a/src/main/java/net/minecraft/server/EntityHuman.java
+++ b/src/main/java/net/minecraft/server/EntityHuman.java
@@ -8,6 +8,8 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.UUID;
 
+import org.github.paperspigot.PaperSpigotConfig; // FlamePaper - Customizable knockback
+
 // CraftBukkit start
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 import org.bukkit.craftbukkit.entity.CraftItem;
@@ -1003,7 +1005,13 @@ public abstract class EntityHuman extends EntityLiving {
 
                     if (flag2) {
                         if (i > 0) {
-                            entity.g((double) (-MathHelper.sin(this.yaw * 3.1415927F / 180.0F) * (float) i * 0.5F), 0.1D, (double) (MathHelper.cos(this.yaw * 3.1415927F / 180.0F) * (float) i * 0.5F));
+                            // FlamePaper start - Customizable knockback
+                            entity.g(
+                                (double) (-MathHelper.sin(this.yaw * 3.1415927F / 180.0F) * (float) i *
+                                    PaperSpigotConfig.knockbackExtraHorizontal), PaperSpigotConfig.knockbackExtraVertical,
+                                (double) (MathHelper.cos(this.yaw * 3.1415927F / 180.0F) * (float) i *
+                                    PaperSpigotConfig.knockbackExtraHorizontal));
+                            // FlamePaper end
                             this.motX *= 0.6D;
                             this.motZ *= 0.6D;
                             this.setSprinting(false);
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index 12257ad2401637936e62198fc994242c36580909..bce7ccb98f47fd2a6c89e691e63a279c1d284650 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -10,6 +10,8 @@ import java.util.Map;
 import java.util.Random;
 import java.util.UUID;
 
+import org.github.paperspigot.PaperSpigotConfig; // FlamePaper - Customizable knockback
+
 // CraftBukkit start
 import java.util.ArrayList;
 import com.google.common.base.Function;
@@ -897,19 +899,23 @@ public abstract class EntityLiving extends Entity {
     public void a(Entity entity, float f, double d0, double d1) {
         if (this.random.nextDouble() >= this.getAttributeInstance(GenericAttributes.c).getValue()) {
             this.ai = true;
-            float f1 = MathHelper.sqrt(d0 * d0 + d1 * d1);
-            float f2 = 0.4F;
-
-            this.motX /= 2.0D;
-            this.motY /= 2.0D;
-            this.motZ /= 2.0D;
-            this.motX -= d0 / (double) f1 * (double) f2;
-            this.motY += (double) f2;
-            this.motZ -= d1 / (double) f1 * (double) f2;
-            if (this.motY > 0.4000000059604645D) {
-                this.motY = 0.4000000059604645D;
+            // FlamePaper start - Customizable knockback
+            double magnitude = MathHelper.sqrt(d0 * d0 + d1 * d1);
+            double friction = PaperSpigotConfig.knockbackFriction;
+            double horizontalKnockback = PaperSpigotConfig.knockbackHorizontal;
+            double verticalKnockback = PaperSpigotConfig.knockbackVertical;
+
+            this.motX /= friction;
+            this.motY /= friction;
+            this.motZ /= friction;
+            this.motX -= d0 / magnitude * horizontalKnockback;
+            this.motY += verticalKnockback;
+            this.motZ -= d1 / magnitude * horizontalKnockback;
+
+            if (this.motY > PaperSpigotConfig.knockbackVerticalLimit) {
+                this.motY = PaperSpigotConfig.knockbackVerticalLimit;
             }
-
+            // FlamePaper end - Customizable knockback
         }
     }
 
diff --git a/src/main/java/org/github/paperspigot/KnockbackCommand.java b/src/main/java/org/github/paperspigot/KnockbackCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..fe8f174708e5077953689f950619b987e375ee1e
--- /dev/null
+++ b/src/main/java/org/github/paperspigot/KnockbackCommand.java
@@ -0,0 +1,146 @@
+package org.github.paperspigot;
+
+import com.google.common.collect.ImmutableList;
+import org.bukkit.ChatColor;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.bukkit.util.StringUtil;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class KnockbackCommand extends Command {
+    private static final List<String> ARGUMENTS = ImmutableList.of("friction", "horizontal", "vertical", "vertical-limit", "extra-horizontal", "extra-vertical", "reset", "show");
+
+    // Default values
+    private final double knockbackFriction, knockbackHorizontal, knockbackVertical, knockbackVerticalLimit,
+            knockbackExtraHorizontal, knockbackExtraVertical;
+
+    public KnockbackCommand(String name, double knockbackFriction, double knockbackHorizontal,
+                                        double knockbackVertical, double knockbackVerticalLimit,
+                                        double knockbackExtraHorizontal, double knockbackExtraVertical) {
+        super(name);
+        this.description = "Modify the knockback configuration";
+        this.usageMessage = "/knockback " +
+                "<friction|horizontal|vertical|vertical-limit|extra-horizontal|extra-vertical|reset|show> <value>";
+        this.setPermission("bukkit.command.knockback");
+        this.knockbackFriction = knockbackFriction;
+        this.knockbackHorizontal = knockbackHorizontal;
+        this.knockbackVertical = knockbackVertical;
+        this.knockbackVerticalLimit = knockbackVerticalLimit;
+        this.knockbackExtraHorizontal = knockbackExtraHorizontal;
+        this.knockbackExtraVertical = knockbackExtraVertical;
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String currentAlias, String[] args) {
+        if (!testPermission(sender)) {
+            return true;
+        }
+        if (args.length < 1) {
+            sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
+            return true;
+        }
+
+
+        try {
+            switch (args[0].toLowerCase()) {
+                case "friction": {
+                    double oldVal = PaperSpigotConfig.knockbackFriction;
+                    double newVal = parseValue(args);
+                    PaperSpigotConfig.knockbackFriction = newVal;
+                    updated(sender, "friction", oldVal, newVal);
+                    break;
+                }
+                case "horizontal": {
+                    double oldVal = PaperSpigotConfig.knockbackHorizontal;
+                    double newVal = parseValue(args);
+                    PaperSpigotConfig.knockbackHorizontal = newVal;
+                    updated(sender, "horizontal knockback", oldVal, newVal);
+                    break;
+                }
+                case "vertical": {
+                    double oldVal = PaperSpigotConfig.knockbackVertical;
+                    double newVal = parseValue(args);
+                    PaperSpigotConfig.knockbackVertical = newVal;
+                    updated(sender, "vertical knockback", oldVal, newVal);
+                    break;
+                }
+                case "vertical-limit": {
+                    double oldVal = PaperSpigotConfig.knockbackVerticalLimit;
+                    double newVal = parseValue(args);
+                    PaperSpigotConfig.knockbackVerticalLimit = newVal;
+                    updated(sender, "vertical limit", oldVal, newVal);
+                    break;
+                }
+                case "extra-horizontal": {
+                    double oldVal = PaperSpigotConfig.knockbackExtraHorizontal;
+                    double newVal = parseValue(args);
+                    PaperSpigotConfig.knockbackExtraHorizontal = newVal;
+                    updated(sender, "horizontal (extra)", oldVal, newVal);
+                    break;
+                }
+                case "extra-vertical": {
+                    double oldVal = PaperSpigotConfig.knockbackExtraVertical;
+                    double newVal = parseValue(args);
+                    PaperSpigotConfig.knockbackExtraVertical = newVal;
+                    updated(sender, "vertical (extra)", oldVal, newVal);
+                    break;
+                }
+                case "reset":
+                    PaperSpigotConfig.knockbackFriction = knockbackFriction;
+                    PaperSpigotConfig.knockbackHorizontal = knockbackHorizontal;
+                    PaperSpigotConfig.knockbackVertical = knockbackVertical;
+                    PaperSpigotConfig.knockbackVerticalLimit = knockbackVerticalLimit;
+                    PaperSpigotConfig.knockbackExtraHorizontal = knockbackExtraHorizontal;
+                    PaperSpigotConfig.knockbackExtraVertical = knockbackExtraVertical;
+                    sender.sendMessage(ChatColor.GREEN + "Knockback config reset to values from file.");
+                    break;
+                case "show":
+                    sender.sendMessage(ChatColor.GOLD + "Knockback Configuration");
+                    sendValue(sender, "Friction", PaperSpigotConfig.knockbackFriction);
+                    sendValue(sender, "Horizontal Knockback", PaperSpigotConfig.knockbackHorizontal);
+                    sendValue(sender, "Vertical Knockback", PaperSpigotConfig.knockbackVertical);
+                    sendValue(sender, "Vertical Limit", PaperSpigotConfig.knockbackVerticalLimit);
+                    sendValue(sender, "Horizontal (Extra)", PaperSpigotConfig.knockbackExtraHorizontal);
+                    sendValue(sender, "Vertical (Extra)", PaperSpigotConfig.knockbackExtraVertical);
+                    break;
+                default:
+                    sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
+            }
+        } catch (RuntimeException ex) {
+            sender.sendMessage(ChatColor.RED + ex.getMessage());
+        }
+
+        return true;
+    }
+
+    @Override
+    public List<String> tabComplete(CommandSender sender, String alias, String[] args) throws IllegalArgumentException {
+        if (args.length == 1) {
+            return StringUtil.copyPartialMatches(args[0], ARGUMENTS, new ArrayList<>(ARGUMENTS.size()));
+        }
+        return ImmutableList.of();
+    }
+
+    private double parseValue(String[] args) {
+        if (args.length != 2)
+            throw new RuntimeException("Please specify a single value to set the option to.");
+
+        try {
+            return Double.parseDouble(args[1]);
+        } catch (NumberFormatException ex) {
+            throw new RuntimeException("Invalid value specified!");
+        }
+    }
+
+    private void updated(CommandSender viewer, String name, double oldVal, double newVal) {
+        viewer.sendMessage(ChatColor.GREEN + "Updated " + ChatColor.GOLD + name + ChatColor.GREEN + " from " +
+                ChatColor.BLUE + oldVal + ChatColor.GREEN + " to " + ChatColor.BLUE + newVal);
+    }
+
+    private void sendValue(CommandSender viewer, String name, double value) {
+        viewer.sendMessage(ChatColor.AQUA + ChatColor.BOLD.toString() + name + ChatColor.RESET +
+                ": " + ChatColor.BLUE + value);
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/org/github/paperspigot/PaperSpigotConfig.java b/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
index 46b8c51189c92bf87ef65a65331add881a8b27be..5d4ebfbae03567b61a0450fcb15fe2a6883c9881 100644
--- a/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
+++ b/src/main/java/org/github/paperspigot/PaperSpigotConfig.java
@@ -229,6 +229,24 @@ public class PaperSpigotConfig
         bookMaxPages = getInt("book.max_pages", 5);
     }
     
+    public static double knockbackFriction;
+    public static double knockbackHorizontal;
+    public static double knockbackVertical;
+    public static double knockbackVerticalLimit;
+    public static double knockbackExtraHorizontal;
+    public static double knockbackExtraVertical;
+    private static void knockback() {
+        knockbackFriction = getDouble( "knockback.friction", 2.0D );
+        knockbackHorizontal = getDouble( "knockback.horizontal", 0.4D );
+        knockbackVertical = getDouble( "knockback.vertical", 0.4D );
+        knockbackVerticalLimit = getDouble( "knockback.vertical-limit", 0.4D );
+        knockbackExtraHorizontal = getDouble( "knockback.extra-horizontal", 0.5D );
+        knockbackExtraVertical = getDouble( "knockback.extra-vertical", 0.1D );
+        commands.put("knockback", new KnockbackCommand( "knockback", knockbackFriction,
+                knockbackHorizontal, knockbackVertical, knockbackVerticalLimit, knockbackExtraHorizontal,
+                knockbackExtraVertical));
+    }
+
     public static boolean pearlPassthroughFenceGate;
     private static void pearlPassthroughFenceGate()
     {
