From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: RoccoDev <hey@rocco.dev>
Date: Thu, 4 Mar 2021 20:10:35 +0100
Subject: [PATCH] (KigPaper) Paper-0117 Better synchronization on new
 connections


diff --git a/src/main/java/net/minecraft/server/ServerConnection.java b/src/main/java/net/minecraft/server/ServerConnection.java
index f13182c186723c0fe6ac695c8fe3a0c0bcfaab5d..4151591320a25da093a762ccf9d3509e9c84ff82 100644
--- a/src/main/java/net/minecraft/server/ServerConnection.java
+++ b/src/main/java/net/minecraft/server/ServerConnection.java
@@ -67,6 +67,16 @@ public class ServerConnection {
         this.d = true;
     }
 
+    // KigPaper start - Paper-0117 by Aikar
+    private final List<NetworkManager> pending = Collections.synchronizedList(Lists.newArrayList());
+    private void addPending() {
+        synchronized (pending) {
+            this.h.addAll(pending);
+            pending.clear();
+        }
+    }
+    // KigPaper end
+
     public void a(InetAddress inetaddress, int i) throws IOException {
         List list = this.g;
 
@@ -95,7 +105,8 @@ public class ServerConnection {
                     channel.pipeline().addLast("timeout", new ReadTimeoutHandler(30)).addLast("legacy_query", new LegacyPingHandler(ServerConnection.this)).addLast("splitter", new PacketSplitter()).addLast("decoder", new PacketDecoder(EnumProtocolDirection.SERVERBOUND)).addLast("prepender", new PacketPrepender()).addLast("encoder", new PacketEncoder(EnumProtocolDirection.CLIENTBOUND));
                     NetworkManager networkmanager = new NetworkManager(EnumProtocolDirection.SERVERBOUND);
 
-                    ServerConnection.this.h.add(networkmanager);
+                    //ServerConnection.this.h.add(networkmanager);
+                    pending.add(networkmanager); // KigPaper
                     channel.pipeline().addLast("packet_handler", networkmanager);
                     networkmanager.a((PacketListener) (new HandshakeListener(ServerConnection.this.f, networkmanager)));
                 }
@@ -124,6 +135,7 @@ public class ServerConnection {
 
         synchronized (this.h) {
             // Spigot Start
+            addPending(); // KigPaper
             // This prevents players from 'gaming' the server, and strategically relogging to increase their position in the tick order
             if ( org.spigotmc.SpigotConfig.playerShuffle > 0 && MinecraftServer.currentTick % org.spigotmc.SpigotConfig.playerShuffle == 0 )
             {
